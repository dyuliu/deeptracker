'use strict';

namespace application {
  export class HeatmapController {
    public static $inject: Array<string> = ['$scope', '$http', 'Pip'];

    constructor($scope, $http: ng.IHttpService, Pip) {
      $scope.attrList = [
        'GradStatSeqHistogram',
        'WeightStatSeqHistogram'
      ];

      interface IlayerInfoElement {
        lid: number;
        name: string;
        type: string;
        channels: number;
        kernelNum: number;
        kernelHeight: number;
        kernelWidth: number;
        label?: string;
      };

      async.parallel({
        'layerinfo': cb => {
          $http({
            method: 'POST',
            url: '/api/layerinfo'
          })
            .success((data: IlayerInfoElement[]) => {
              let filteredData: IlayerInfoElement[] = _.filter(data, (o) => {
                o.label = o.lid + '_' + o.name;
                return o.type !== 'batch_norm';
              });
              cb(null, filteredData);
            });
        },
        'dbinfo': cb => {
          $http({
            method: 'POST',
            url: '/api/dbinfo'
          })
            .success((data) => {
              console.log(data);
              cb(null, data);
            });
        }
      }, (err, results: any) => {
        $scope.dbList = results.dbinfo;
        $scope.layerList = results.layerinfo;
      });

      interface IrawChartData {
        iter: number;
        value: any[];
      }
      $scope.$watch('selectedDB', (newValue, oldValue) => {
        if (newValue === oldValue) { return; }
        $scope.widList = _.range($scope.selectedDB.wnumber);
      });

      $scope.add = () => {
        let minAttrName, maxAttrName;
        if (_.startsWith($scope.selectedAttr, 'Grad')) {
          minAttrName = 'GradStatMin';
          maxAttrName = 'GradStatMax';
        } else {
          minAttrName = 'WeightStatMin';
          maxAttrName = 'WeightStatMax';
        };

        async.parallel({
          'min': cb => {
             $http({
              method: 'POST',
              url: '/api/attr',
              data: {
                db: $scope.selectedDB.name,
                wid: $scope.selectedWid,
                attr: minAttrName,
                layer: $scope.selectedLayer
              }
            })
            .success((data) => {
              _.forEach(data, (o) => {
                o.value = o.value[$scope.selectedLayer];
              });
              cb(null, data);
            });
          },
          'max': cb => {
            $http({
              method: 'POST',
              url: '/api/attr',
              data: {
                db: $scope.selectedDB.name,
                wid: $scope.selectedWid,
                attr: maxAttrName,
                layer: $scope.selectedLayer
              }
            })
            .success((data) => {
              _.forEach(data, (o) => {
                o.value = o.value[$scope.selectedLayer];
              });
              cb(null, data);
            });
          },
          'data': cb => {
            $http({
              method: 'POST',
              url: '/api/attr',
              data: {
                db: $scope.selectedDB.name,
                wid: $scope.selectedWid,
                attr: $scope.selectedAttr,
                layer: $scope.selectedLayer
              }
            })
            .success((data: IrawChartData[]) => {
              _.forEach(data, (o) => {
                o.value = o.value[$scope.selectedLayer];
              });
              cb(null, data);
            });
          }
        }, (err, results: any) => {
          console.log(results);
          console.log(Pip);
          Pip.emitHeatmapDataLoaded(results);
          // processData(results.data);
        });

      };
    }
  }

  angular
    .module('vis')
    .controller('HeatmapController', HeatmapController);
}
